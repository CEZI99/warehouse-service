services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: warehouse_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d  # Монтируем папку с миграциями
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d warehouse_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list"]
      interval: 5s
      timeout: 5s
      retries: 5

  app:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app/app
    environment:
      DATABASE_URL: postgresql+asyncpg://user:password@postgres:5432/warehouse_db
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      PYTHONPATH: /app
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]

  kafka_consumer:
    build: .
    volumes:
      - ./app:/app/app
    environment:
      DATABASE_URL: postgresql+asyncpg://user:password@postgres:5432/warehouse_db
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      PYTHONPATH: /app
    depends_on:
      - kafka
      - postgres
    command: 
      - sh
      - -c
      - |
        # Ждём готовности Kafka и Postgres
        # while ! nc -z kafka 9092; do sleep 1; done
        # while ! pg_isready -h postgres -U user -d warehouse_db; do sleep 1; done
        # Запускаем consumer
        python -m app.kafka_consumer.main
    restart: unless-stopped

volumes:
  postgres_data: